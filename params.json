{"name":"Epocutils","tagline":"Set of helpers to use the Emotiv Epoc SDK - C/C++","body":"### Welcome to the Epocutils Github Project Page.\r\nThis project aims to provide a simple-yet-prowerfull system-wide library ( on Linux for now ) for use with the Emotiv Epoc headset.\r\nIt includes code for accessing both the raw EEG data & the data after EDK processing.\r\n\r\n### Notes\r\n\r\nThe project currently holds the necessary code for both the processed data & the raw EEG one.\r\nIt 's still in beta, and the code will be \"cleaned up\" in the next few weeks ( ... ).\r\n\r\nLater improvements includes the ability to pass functions to the 'epocutils::handleEvents()' function, making it possible to handle both the eEvents & what to do with the raw EEG data in two separate external functions ( that can be defined in a \"amin.cpp\" file or elswhere practical for the programmer ).\r\n\r\nKeep informed ;D\r\n\r\n### Usage\r\n```\r\n// main.cpp\r\n#include \"epocutils.hpp\" // include the 'epocutils' helpers\r\n// ( ... )\r\nint main(int agrc, char *argv[])\r\n{\r\n  // init code for the program ( SDL stuff, ... )\r\n  EmoEngineEventHandle eEvent = epocutils::createEventHandle();\r\n  EmoStateHandle       eState = epocutils::createStateHandle();\r\n  unsigned int         userID = 0;\r\n  int                  epoc_state = 0;\r\n  bool                 connected = false;\r\n  \r\n  epocutils::EpocHeadset_t myEpocHeadset;\r\n  epocutils::initializeEpocHeadsetStruct(userID, myEpocHeadset);\r\n  // ( ... )\r\n  int epoc_conn_retval = epocutils::connect(connected);\r\n  if ( epoc_conn_retval != 0 )\r\n  {\r\n    std::cout << \"Failed to connect to the Epoc headset.\" << std::endl;\r\n  }\r\n  else\r\n  {\r\n    std::cout << \"Connected to the Epoc headset.\" << std::endl;\r\n  }\r\n\r\n  // ( ... )\r\n  while (1) // dummy infinite loop\r\n  {\r\n    epocutils::handleEvents(connected, epoc_state, eEvent, eState, userID, myEpocHeadset);\r\n    if ( cartman.newDataToRead )\r\n    {\r\n      // ( ... )\r\n      myEpocHeadset.newDataToRead = false;\r\n    }\r\n  }\r\n  epocutils::disconnect(connected, eState, eEvent);\r\n\r\n  return 0;\r\n}\r\n```\r\n### Compiling\r\n```\r\n$ // example of compiling & linking against the Emotiv library\r\n$ g++ -Wall -o epoc_test.out main.cpp epocutils.hpp epocutils.cpp edk.h edkErrorCode.h EmoStateDLL.h -ledk -ledk_utils_linux\r\n```\r\n\r\n### Requirements\r\n# from the Emotiv EDK\r\nThe edk.h, edk_utils_<platform>.h, EmoStateDLL.h, & edkErrorCode.h header files\r\nThe library corresponding to your platform ( .so on Linux | .dylib on Mac )\r\n\r\n### Authors and Contributors\r\nStephaneAG ( @StephaneAG )\r\n\r\n### Support or Contact\r\nFeel free to contact me for any help, suggestion, or related stuff.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}